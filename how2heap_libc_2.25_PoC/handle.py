from pwn import *

argv = ['./glibc_run.sh', '2.25', './heap_world']
p = process(executable = './glibc_run.sh', argv = argv)
i = 0
SIZE_SZ = 0x8

def exec_file():
	log.info('Start')
	return p

def system_address():
	p.recvuntil('Master # ')
	add = int(p.readline()[0:-1],16)
	log.info(str(hex(add)))
	return add


def malloc(size):
	p.sendline('1') # main menu
	p.sendline('1') # heap menu
	p.sendline(str(size))
	sleep(1)
	global i
	p.recvuntil('malloc size > ')
	p.recvuntil('select menu > ')
	log.info('malloc(' + str(hex(size)) + ')' + ' : ' + str(i))
	i = i + 1

def chunk_info(index):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.recvuntil('<Chunk ' + str(index) + '>\naddress : ')
	p.sendline('3')
	sleep(1)
	address = int(p.recvline()[0:-1], 16)
	p.recvuntil('Data : \n')
	s = p.readline()
	fd = int(s[21:21+18],16)
	bk = int(s[21+18+1:21+18+1+18],16)
	log.info('Chunk ' + str(index) + ' address : ' + str(hex(address)) + ', fd : ' + str(hex(fd)) + ', bk : ' + str(hex(bk)))
	p.recvuntil('<end>')
	p.recvuntil('4. free menu\nselect menu > ')
	return [address,fd,bk]

def write_to_chunk(index, data):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.recvuntil('<Chunk ' + str(index) + '>\n')
	p.sendline('1')
	p.sendline(data)
	log.info('write to Chunk ' + str(index) + ' > ' + str(data))
	p.recvuntil('data > ')
	p.recvuntil('select menu > ')
	sleep(1)

def free_chunk(index):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.sendline('2')
	log.info('free Chunk ' + str(index))
	p.recvuntil('<Chunk ' + str(index) + '>\naddress : ')
	sleep(1)

def free(address):
	p.sendline('4')
	p.sendline(str(address))
	log.info('free Address ' + str(hex(address)))
	sleep(1)

def global_ptr_address():
	p.sendline('2')
	p.recvuntil('<global_ptr>\naddress : ')
	p.sendline('3')
	sleep(1)
	address = int(p.recvline()[0:-1], 16)
	log.info('global_ptr address : ' + str(hex(address)))
	return address

def write_pointer_to_global_ptr(data):
	p.sendline('2')
	p.recvuntil('select >')
	p.sendline('1')
	p.recvuntil('select >')
	p.sendline('1')
	p.sendline(data)
	sleep(1)
	log.info('write to global ptr > ' + data)
	p.recvuntil('select >')
	p.sendline('3')
	p.recvuntil('select menu > ')

def write_data_to_global_ptr(data):
	p.sendline('2')
	p.recvuntil('select >')
	p.sendline('1')
	p.recvuntil('select >')
	p.sendline('2')
	p.sendline(data)
	sleep(1)
	log.info('write through global ptr > ' + data)
	p.recvuntil('select >')
	p.sendline('3')
	p.recvuntil('select menu > ')

def bss_var_address():
	p.sendline('2')
	p.recvuntil('<bss_var>\naddress : ')
	p.sendline('3')
	sleep(1)
	address = int(p.recvline()[0:-1], 16)
	log.info('bss_var address : ' + str(hex(address)))
	return address

def stack_var_1_address():
	p.sendline('3')
	p.recvuntil('<stack_var_1>\naddress : ')
	p.sendline('4')
	address = int(p.recvline()[0:-1], 16)
	log.info('stack_var_1 address :' + str(hex(address)))
	sleep(1)
	p.recvuntil('select > ')
	return address

def write_to_stack_var_1(data):
	p.sendline('3')
	p.sendline('1')
	p.sendline(data)
	log.info('write to stack_var_1 > ' + data)
	p.recvuntil('Done')
	sleep(1)


def stack_var_2_address():
	p.sendline('3')
	p.recvuntil('<stack_var_2>\naddress : ')
	p.sendline('4')
	sleep(1)
	address = int(p.recvline()[0:-1], 16)
	log.info('stack_var_2 address :' + str(hex(address)))
	return address

def write_to_stack_var_2(data):
	p.sendline('3')
	p.sendline('2')
	p.sendline(data)
	log.info('write to stack_var_2 > ' + data)	
	sleep(1)

def stack_ptr_address():
	p.sendline('3')
	p.recvuntil('<stack_ptr>\naddress : ')
	p.sendline('4')
	sleep(1)
	address = int(p.recvline()[0:-1], 16)
	log.info('stack_ptr address : ' + str(hex(address)))
	return address
