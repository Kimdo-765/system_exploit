from pwn import *

def exec_file():
	argv = ['./glibc_run.sh', '2.25', './heap_world']
	global p = process(executable = './glibc_run.sh', argv = argv)
	return p

def malloc(size):
	p.sendline('1')
	p.sendline('1')
	p.sendline(str(size))

def chunk_address(index):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.recvuntil('<Chunk ' + str(index) + '>\naddress : ')
	p.sendline('3')
	return int(p.recvline()[0:-1], 16)

def write_to_heap(index, data):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.sendline('1')
	p.sendline(data)

def free_chunk(index):
	p.sendline('1')
	p.sendline('2')
	p.sendline(str(index))
	p.sendline('2')

def free(address):
	p.sendline('4')
	p.sendline(str(address))

def global_ptr_address():
	p.sendline('2')
	p.recvuntil('<global_ptr>\naddress : ')
	p.sendline('3')
	return int(p.recvline()[0:-1], 16)

def bss_var_address():
	p.sendline('2')
	p.recvuntil('<bss_var>\naddress : ')
	p.sendline('3')
	return int(p.recvline()[0:-1], 16)

def stack_var_1_address():
	p.sendline('3')
	p.recvuntil('<stack_var_1>\naddress : ')
	p.sendline('4')
	return int(p.recvline()[0:-1], 16)

def write_to_stack_var_1(data):
	p.sendline('3')
	p.sendline('1')
	p.sendline(data)


def stack_var_2_address():
	p.sendline('3')
	p.recvuntil('<stack_var_2>\naddress : ')
	p.sendline('4')
	return int(p.recvline()[0:-1], 16)

def write_to_stack_var_2(data):
	p.sendline('3')
	p.sendline('2')
	p.sendline(data)

def stack_ptr_address():
	p.sendline('3')
	p.recvuntil('<stack_ptr>\naddress : ')
	p.sendline('4')
	return int(p.recvline()[0:-1], 16)
